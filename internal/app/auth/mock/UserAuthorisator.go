// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/auth/middleware.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/avGenie/url-shortener/internal/app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUserAuthorisator is a mock of UserAuthorisator interface.
type MockUserAuthorisator struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthorisatorMockRecorder
}

// MockUserAuthorisatorMockRecorder is the mock recorder for MockUserAuthorisator.
type MockUserAuthorisatorMockRecorder struct {
	mock *MockUserAuthorisator
}

// NewMockUserAuthorisator creates a new mock instance.
func NewMockUserAuthorisator(ctrl *gomock.Controller) *MockUserAuthorisator {
	mock := &MockUserAuthorisator{ctrl: ctrl}
	mock.recorder = &MockUserAuthorisatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthorisator) EXPECT() *MockUserAuthorisatorMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserAuthorisator) AddUser(ctx context.Context, userID entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserAuthorisatorMockRecorder) AddUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserAuthorisator)(nil).AddUser), ctx, userID)
}

// AuthUser mocks base method.
func (m *MockUserAuthorisator) AuthUser(ctx context.Context, userID entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockUserAuthorisatorMockRecorder) AuthUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockUserAuthorisator)(nil).AuthUser), ctx, userID)
}

// MockUserAdder is a mock of UserAdder interface.
type MockUserAdder struct {
	ctrl     *gomock.Controller
	recorder *MockUserAdderMockRecorder
}

// MockUserAdderMockRecorder is the mock recorder for MockUserAdder.
type MockUserAdderMockRecorder struct {
	mock *MockUserAdder
}

// NewMockUserAdder creates a new mock instance.
func NewMockUserAdder(ctrl *gomock.Controller) *MockUserAdder {
	mock := &MockUserAdder{ctrl: ctrl}
	mock.recorder = &MockUserAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAdder) EXPECT() *MockUserAdderMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserAdder) AddUser(ctx context.Context, userID entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserAdderMockRecorder) AddUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserAdder)(nil).AddUser), ctx, userID)
}

// MockUserAuthenticator is a mock of UserAuthenticator interface.
type MockUserAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthenticatorMockRecorder
}

// MockUserAuthenticatorMockRecorder is the mock recorder for MockUserAuthenticator.
type MockUserAuthenticatorMockRecorder struct {
	mock *MockUserAuthenticator
}

// NewMockUserAuthenticator creates a new mock instance.
func NewMockUserAuthenticator(ctrl *gomock.Controller) *MockUserAuthenticator {
	mock := &MockUserAuthenticator{ctrl: ctrl}
	mock.recorder = &MockUserAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthenticator) EXPECT() *MockUserAuthenticatorMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockUserAuthenticator) AuthUser(ctx context.Context, userID entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockUserAuthenticatorMockRecorder) AuthUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockUserAuthenticator)(nil).AuthUser), ctx, userID)
}
